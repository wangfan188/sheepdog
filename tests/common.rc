#!/bin/bash
#
# Copyright (C) 2009 Red Hat, Inc.
# Copyright (c) 2000-2006 Silicon Graphics, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# we need common.config
if [ "$iam" != "check" ]
then
    if ! . ./common.config
        then
        echo "$iam: failed to source common.config"
        exit 1
    fi
fi

# make sure we have a standard umask
umask 022

# Do a command, log it to $seq.full, optionally test return status
# and die if command fails. If called with one argument _do executes the
# command, logs it, and returns its exit status. With two arguments _do
# first prints the message passed in the first argument, and then "done"
# or "fail" depending on the return status of the command passed in the
# second argument. If the command fails and the variable _do_die_on_error
# is set to "always" or the two argument form is used and _do_die_on_error
# is set to "message_only" _do will print an error message to
# $seq.out and exit.

_do()
{
    if [ $# -eq 1 ]; then
	_cmd=$1
    elif [ $# -eq 2 ]; then
	_note=$1
	_cmd=$2
	echo -n "$_note... "
    else
	echo "Usage: _do [note] cmd" 1>&2
	status=1; exit
    fi

    (eval "echo '---' \"$_cmd\"") >>$here/$seq.full
    (eval "$_cmd") >$tmp._out 2>&1; ret=$?
    cat $tmp._out >>$here/$seq.full
    if [ $# -eq 2 ]; then
	if [ $ret -eq 0 ]; then
	    echo "done"
	else
	    echo "fail"
	fi
    fi
    if [ $ret -ne 0  ] \
	&& [ "$_do_die_on_error" = "always" \
	    -o \( $# -eq 2 -a "$_do_die_on_error" = "message_only" \) ]
    then
	[ $# -ne 2 ] && echo
	eval "echo \"$_cmd\" failed \(returned $ret\): see $seq.full"
	status=1; exit
    fi

    return $ret
}

# bail out, setting up .notrun file
#
_notrun()
{
    echo "$*" >$seq.notrun
    echo "$seq not run: $*"
    status=0
    exit
}

# just plain bail out
#
_fail()
{
    echo "$*" | tee -a $here/$seq.full
    echo "(see $seq.full for details)"
    status=1
    exit 1
}

# this test requires that a specified command (executable) exists
#
_require_command()
{
    [ -n "`which $1`" ] || _notrun "$1 utility required, skipped this test"
    [ -x "`which $1`" ] || _notrun "$1 utility required, skipped this test"
}

_full_platform_details()
{
    os=`uname -s`
    host=`hostname -s`
    kernel=`uname -r`
    platform=`uname -m`
    echo "$os/$platform $host $kernel"
}

_die()
{
    echo $@
    exit 1
}

_cleanup()
{
    _kill_all_collies
    _kill_all_sheeps

    _cleanup_devices

    mkdir -p $STORE
    for i in $STORE/?; do
        rm -rf $i
    done
    for i in $STORE/??; do
        rm -rf $i
    done

    if [[ "$DRIVER" == zoo* ]];then
        sleep 5 # wait for zookeeper ephemeral node to be deleted
    fi
}

_count_sheep_processes()
{
    pgrep -f "$SHEEP_PROG $STORE/" -l | awk '{ $1=""; print }' | sort | uniq | wc -l
}

# wait for all sheep to join completely
_wait_for_sheep()
{
    PORT=7000
    if [ $2 ]; then
        PORT=$((7000 + $2))
    fi
    while true; do
        sleep 2

        if [ $(_count_sheep_processes) != $1 ]; then
            _die "should have $1, but have $(_count_sheep_processes) sheep"
        fi

        node_list="$($COLLIE node list -p $PORT 2> /dev/null)"

        if [ $? != 0 ]; then
            # sheep is not ready yet
            continue
        fi

        nr_sheep="$(echo "$node_list" | wc -l)"

        if [ ${nr_sheep} -eq $(($1+1)) ]; then
            break
        fi
        if [ ${nr_sheep} -gt $(($1+1)) ]; then
            _die "ERROR: too many sheep in cluster: ${nr_sheep}"
        fi
    done
}

_valgrind_sheep()
{
    mkdir $1 > /dev/null 2>&1

    # Dump a core file and stop the script on the first valgrind error.
    db_cmd="gdb -nw --ex \"generate-core-file $1/core\" %f %p > /dev/null; \
            echo \"core dumped ($1/core)\"; kill \$PPID"
    opts="--db-attach=yes --db-command='${db_cmd}' --suppressions=valgrind.supp"

    sh -c "echo y | valgrind ${opts} $SHEEP_PROG $@ -f -o 2>> $1/sheep.log &"

    # wait for sheep to start up
    while true; do
        if [ -a $1/lock ]; then
            break
        fi
    done
}

_valgrind_collie()
{
    logfile=$(mktemp)
    valgrind --log-file=$logfile --error-exitcode=99 $COLLIE_PROG "$@"
    if [ $? == 99 ]; then
        cat $logfile 1>&2
    fi
    rm $logfile
}

_start_sheep()
{
    # ensure that sheep is not running
    running=true
    for cnt in `seq 1 10`; do  # wait at most 10 seconds
        pgrep -f "$SHEEP_PROG $STORE/$1" > /dev/null
        if [ $? != 0 ]; then
            running=false
            break
        fi
        sleep 1
    done

    if $running; then
        _die "sheep $1 is still running"
    fi

    if $md; then
	RAID=",$STORE/$1/d0,$STORE/$1/d1"
    fi

    $SHEEP $STORE/$1$RAID -z $1 -p $((7000+$1)) -c $DRIVER -y 127.0.0.1 -d $2 -F $LOG_FORMAT

    if [ $? != 0 ]; then
        _die "cannot start sheep $1"
    fi
}

_kill_all_collies()
{
    pkill -9 -f "$COLLIE_PROG (cluster|vdi|node|debug)"

    while [ $? == 0 ]; do
        pgrep -f "$COLLIE_PROG (cluster|vdi|node|debug)" > /dev/null
    done
}

_kill_all_sheeps()
{
    pkill -9 -f "$SHEEP_PROG $STORE"

    while [ $? == 0 ]; do
        pgrep -f "$SHEEP_PROG $STORE" > /dev/null
    done
}

_kill_sheep()
{
    pkill -9 -f "$SHEEP_PROG $STORE/$1"

    if [ $? != 0 ]; then
        _die "cannot kill sheep $1"
    fi

    while [ $? == 0 ]; do
	pgrep -f "$SHEEP_PROG $STORE/$1" > /dev/null
    done

    if [[ "$DRIVER" == zoo* ]];then
        sleep 3 # wait for zookeeper ephemeral node to be deleted
    fi
}

_wait_for_sheep_recovery()
{
    while true; do
        sleep 2
        recovery_info="$($COLLIE node recovery -p $((7000+$1)))"

        if [ $? != 0 ]; then
            _die "failed to get recovery info"
        fi

        if [ $(echo "$recovery_info" | wc -l) -eq 2 ]; then
            break
        fi

    done
}

# This differ from kill(2) that we don't get the notification that connection is
# closed and most likely leave us half-open connections
_simulate_machine_down()
{
	# Drop the packet in/out this port
	iptables -A INPUT -p tcp --sport $((7000+$1)) -j DROP
	iptables -A INPUT -p tcp --dport $((7000+$1)) -j DROP

	sleep 3
	# Trigger the confchg because cluster driver doesn't know we'er offline
	_kill_sheep $1
	_wait_for_sheep_recovery 0
}

# Cleanup the iptables rules used to simulate machine down
_cleanup_machine_simulation()
{
	iptables -D INPUT -p tcp --sport $((7000+$1)) -j DROP
	iptables -D INPUT -p tcp --dport $((7000+$1)) -j DROP
}

_make_device()
{
    idx=$1; shift
    size=$1; shift
    args=$@

    dd if=/dev/zero of=$STORE/$idx.img seek=$(($size - 1)) bs=1 count=1 > $seq.full 2>&1
    if [ $? != 0 ]; then
        _die "failed to create $STORE/$idx.img"
    fi

    fstype="$(df -T / | tail -1 | awk '{print $2}')"
    case $fstype in
        ext2)
            mkops="-t $fstype -q -F"
            mntops="-o user_xattr"
            ;;
        ext[3-4])
            mkops="-t $fstype -q -F -J size=4"
            mntops="-o user_xattr"
            ;;
        xfs)
            mkops="-t $fstype -f"
            mntops=""
            ;;
        *)
            _die  "For now we only support xfs and ext*."
            ;;
    esac

    mkfs $mkops $STORE/$idx.img > $seq.full 2>&1
    mkdir $STORE/$idx
    mount -o loop $mntops $args $STORE/$idx.img $STORE/$idx
}

_cleanup_devices()
{
    for d in `mount | grep -o $STORE/. | sort | uniq`; do
        umount -l $d
        rm -f $d.img
    done
}

# make sure this script returns success
/bin/true
